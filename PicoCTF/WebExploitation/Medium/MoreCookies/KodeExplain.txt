Kode ini melakukan serangan **bit-flipping** pada sebuah cookie yang dienkripsi atau dienkode dua kali menggunakan Base64, dan mencoba mendekripsi atau memanipulasi cookie tersebut untuk mendapatkan akses tertentu atau melihat konten sensitif, dalam hal ini, flag dari server.

Mari kita bahas bagian-bagian kode ini secara rinci:

### 1. **Import Libraries**

```python
import requests
from base64 import b64decode, b64encode
from tqdm import tqdm
```

- `requests`: Digunakan untuk mengirim permintaan HTTP ke server target.
- `b64decode` dan `b64encode`: Digunakan untuk mendekode dan mengenkode data menggunakan Base64. Dalam kasus ini, cookie dienkode dua kali dalam Base64.
- `tqdm`: Digunakan untuk menampilkan *progress bar* pada terminal saat menjalankan `for` loop, memudahkan pengguna untuk melihat kemajuan proses brute-forcing.

### 2. **Fungsi `bit_flip`**

```python
def bit_flip(pos, bit, data):
    raw = b64decode(b64decode(data).decode())
    list1 = bytearray(raw)
    list1[pos] = list1[pos] ^ bit
    raw = bytes(list1)
    return b64encode(b64encode(raw)).decode()
```

Fungsi `bit_flip` ini melakukan manipulasi bit pada data cookie. Berikut adalah langkah-langkah dalam fungsi ini:

- **Decode Base64 Dua Kali**: `raw = b64decode(b64decode(data).decode())`
  - Karena data dienkode dua kali dengan Base64, kita perlu mendekodenya dua kali untuk mendapatkan data asli dalam bentuk *byte*.
  
- **Byte Array Manipulation**: `list1 = bytearray(raw)`
  - Mengonversi data byte ke `bytearray`, sehingga bisa dimodifikasi secara individual.

- **Bit-Flipping**: `list1[pos] = list1[pos] ^ bit`
  - Melakukan operasi XOR pada bit tertentu di posisi `pos`. Operasi ini membalikkan bit pada posisi tertentu, yang dikenal sebagai **bit-flipping**.

- **Encode Kembali ke Base64 Dua Kali**: `return b64encode(b64encode(raw)).decode()`
  - Setelah modifikasi selesai, data dienkode dua kali lagi ke Base64 agar dapat digunakan sebagai cookie yang valid.

### 3. **Inisialisasi Cookie dan Looping Bruteforce**

```python
cookie = "b3U1VndkUmowSnFkakpLSkRlZ0VoM1V3emJvZUlPOVY5a0hzeDFEZE5tUDFBdFh6d2Exb3FXdUhDY0xtb2hjOGk4TGVUeXlEdEFDbFo4S2NKZkk1a0pvUEdBbys2cmEyZ0dMMDVkZGNGblRBWEhyZGZwQUxzaEJCbVBpSXV0MkQ="
```

- Variabel `cookie` berisi data cookie yang dienkode dalam Base64 dua kali. Ini adalah nilai yang akan dimanipulasi.

```python
for position_idx in tqdm(range(10), desc="Bruteforcing Position"):
    for bit_idx in tqdm(range(96), desc="Bruteforcing Bit"):
        auth_cookie = bit_flip(position_idx, bit_idx, cookie)
```

- **Looping Position**: `for position_idx in range(10)`
  - Loop pertama mencoba berbagai posisi bit (dari 0 hingga 9) untuk dibalik. Angka 10 menunjukkan hanya posisi awal dari cookie yang diperiksa, mungkin karena penulis kode ini hanya ingin menguji sebagian data.

- **Looping Bit Index**: `for bit_idx in range(96)`
  - Loop kedua mencoba berbagai nilai bit untuk setiap posisi. Nilai 96 mungkin tidak mencakup seluruh bit, tetapi dianggap cukup untuk mendapatkan hasil yang diinginkan.
  Dalam konteks ini, angka 96 mungkin dipilih karena panjang data terenkripsi yang diasumsikan. Setiap karakter dalam Base64 mewakili 6 bit, jadi 96 bit akan menghasilkan sekitar 16 karakter (96 / 6 = 16 karakter). Ini mungkin berdasarkan perkiraan panjang area penting dalam cookie tersebut.

### 4. **Mengirim Permintaan HTTP dengan Cookie yang Dimanipulasi**

```python
        cookies = {'auth_name': auth_cookie}
        r = requests.get('http://mercury.picoctf.net:15614/', cookies=cookies)
```

- **Mengatur Cookie**: `cookies = {'auth_name': auth_cookie}`
  - Cookie yang dimanipulasi dengan `bit_flip` dimasukkan sebagai nilai dari `auth_name`.
  
- **Mengirim Permintaan ke Server**: `requests.get(...)`
  - Mengirim permintaan GET ke URL server target dengan cookie yang telah dimanipulasi. Server akan membaca cookie dan mungkin memberikan respons berbeda berdasarkan validitas atau nilai dari cookie tersebut.

### 5. **Memeriksa Respons untuk Flag**

```python
        if "picoCTF{" in r.text:
            # The flag is between `<code>` and `</code>`
            print("Flag: " + r.text.split("<code>")[1].split("</code>")[0])
            break
```

- **Memeriksa Respons untuk Flag**: `if "picoCTF{" in r.text`
  - Jika teks respons dari server berisi kata `"picoCTF{"`, itu berarti kode telah berhasil mengakses flag, yang biasanya menunjukkan bahwa cookie yang dimanipulasi telah diterima sebagai cookie admin atau valid oleh server.

- **Ekstraksi Flag**: `r.text.split("<code>")[1].split("</code>")[0]`
  - Ekstrak flag yang ada di dalam tag `<code>` dari teks respons. Hasilnya kemudian dicetak sebagai flag yang ditemukan.

---

### Ringkasan

Kode ini mencoba melakukan **brute force bit-flipping** pada cookie terenkripsi dengan asumsi bahwa jika cookie dimodifikasi dengan cara tertentu, server akan mengungkapkan flag. Prosesnya adalah sebagai berikut:

1. Mendekode cookie, memodifikasi bit pada posisi tertentu, dan mengenkode ulang.
2. Mengirimkan cookie yang dimodifikasi ke server.
3. Memeriksa respons server untuk melihat apakah flag telah ditemukan.

Kode ini efektif dalam menemukan pola atau data tersembunyi jika server tidak memiliki perlindungan yang baik terhadap manipulasi cookie.
