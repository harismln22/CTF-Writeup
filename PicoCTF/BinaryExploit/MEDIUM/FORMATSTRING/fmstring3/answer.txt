*IO*setvbuf(int64_t arg1, int64_t arg2, uint64_t arg3, int64_t arg4, int64_t arg_58h, int64_t arg_68h);
; arg int64_t arg1 @ rdi
; arg int64_t arg2 @ rsi
; arg uint64_t arg3 @ rdx
; arg int64_t arg4 @ rcx
; arg int64_t arg_58h @ stack + 0x58
; arg int64_t arg_68h @ stack + 0x68
0x0007a3f0      endbr64

int sym.__libc_system(const char *string);
; arg const char *string @ rdi
; var int64_t var_3a0h @ stack - 0x3a0
; var uint64_t var_39ch @ stack - 0x39c
; var int64_t var_398h @ stack - 0x398
; var int64_t var_388h @ stack - 0x388
; var int64_t var_378h @ stack - 0x378
; var int64_t var_370h @ stack - 0x370
; var int64_t var_358h @ stack - 0x358
; var int64_t var_348h @ stack - 0x348
; var int64_t var_340h @ stack - 0x340
; var const char *var_338h @ stack - 0x338
; var int64_t var_328h @ stack - 0x328
; var int64_t var_2a8h @ stack - 0x2a8
; var int64_t var_228h @ stack - 0x228
; var int64_t var_220h @ stack - 0x220
; var int64_t var_1a0h @ stack - 0x1a0
; var int64_t var_188h @ stack - 0x188
; var int64_t var_30h @ stack - 0x30
0x0004f760      endbr64

bagaimana cara mengetahui kalau pada saat pengen merubah address endbr64 (vbuf) itu baiknya mendekati address system endbr64? (maksudku apakah ini memang benar dan kenapa?

Pertanyaan Anda menyentuh beberapa konsep penting dalam reverse engineering dan eksploitasi. Mari kita bahas ini secara bertahap:

1. Tentang `endbr64`:
   `endbr64` adalah instruksi yang digunakan untuk Control-flow Enforcement Technology (CET) pada arsitektur x86-64. Ini biasanya muncul di awal fungsi sebagai mekanisme keamanan.

2. Tentang `setvbuf` dan `system`:
   - `setvbuf` digunakan untuk mengatur buffer pada stream I/O.
   - `system` digunakan untuk mengeksekusi perintah shell.

3. Mengubah address `setvbuf` ke `system`:
   Apa yang Anda tanyakan sebenarnya adalah teknik yang dikenal sebagai "function hooking" atau lebih spesifik, "GOT overwrite". Idenya adalah untuk mengganti alamat fungsi `setvbuf` di Global Offset Table (GOT) dengan alamat `system`.

4. Mengapa ini dilakukan:
   - Tujuannya biasanya untuk mengeksploitasi program.
   - Dengan mengganti `setvbuf` dengan `system`, setiap kali program mencoba memanggil `setvbuf`, sebenarnya `system` yang akan dieksekusi.

5. Mengapa mendekati address `system`:
   - Dalam banyak kasus, GOT terletak di alamat yang lebih rendah daripada fungsi libc seperti `system`.
   - Jika ada pembatasan pada nilai yang bisa Anda tulis (misalnya, hanya bisa menulis nilai yang lebih kecil), maka mencari alamat `system` yang dekat dengan `setvbuf` bisa menjadi solusi.

6. Apakah ini benar:
   - Secara teknis, ini adalah teknik yang valid untuk eksploitasi.
   - Namun, keberhasilannya tergantung pada banyak faktor seperti proteksi yang diterapkan pada binary, versi libc, dan lainnya.

7. Mengapa ini bisa bekerja:
   - Karena kedua fungsi memiliki signature yang mirip (keduanya menerima pointer sebagai argumen pertama).
   - Ketika `setvbuf` dipanggil dengan string sebagai argumen pertama, jika berhasil diganti dengan `system`, string tersebut akan dieksekusi sebagai perintah shell.

